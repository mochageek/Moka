<br><br><br><br><br>
<div class="coffees-container">
  <h3>新規投稿ページ</h3>


  <%= form_for @coffee do |f| %>


    <div class="field">
      <%= f.label :image %>
      <%= f.file_field :images, multiple: true, id: "image-input" %>
      <div id="image-preview"></div>
  </div> 

    <div class="field">
      <%= f.label :area %>
      <%= f.text_field :area, :size => 30 %>
    </div>


    <div class="field">
      <%= f.label :open %>
      <%= f.time_field :open, :size => 30 %>
    </div>


    <div class="field">
      <%= f.label :close %>
      <%= f.time_field :close, :size => 30 %>
    </div>


    <div class="field">
      <%= f.label :body  %>
      <%= f.text_area :body, :size => "30x2" %>
    </div>

    <br>

    <p>タグを選択</p>
    <div class='form-group'>
          <%= f.collection_check_boxes(:tag_ids, Tag.all, :id, :name) do |tag| %>
              <div class='form-check'>
                  <%= tag.label class: 'form-check-label' do %>
                      <%= tag.check_box class: 'form-check-input' %>
                      <%= tag.text %>
                  <% end %>
              </div>
          <% end %>
    </div>
    
    <br>
      
    <h2>Map</h2>

      <!--<div class="actions">
        <%= f.label :lat,"緯度" %>
        <%= f.text_field :lat,:value =>"緯度", id: :lat %>
        <%= f.label :lng,"経度" %>
        <%= f.text_field :lng,:value =>"経度", id: :lng %>
      </div>-->

    <p>店名を入力<p>
    <%= f.text_field :shop, id: :address %>
    <input type="button" value="検索" onclick="codeAddress()">

    <p>マーカーをドラック＆ドロップで位置の調整ができます。<p>
    <div id='map'></div>
    
    <style>
      #map {
        height: 600px;
        width: 600px;
      }
    </style>

    <script>
      //初期マップの設定
      let map  
      let marker
      function initMap(){  
        geocoder = new google.maps.Geocoder()
        map = new google.maps.Map(document.getElementById('map'), {
        center:  {lat: 35.6803997, lng:139.7690174},  //東京
        zoom: 15,
        });
      }

      let geocoder
      let aft
      function codeAddress(){
        let inputAddress = document.getElementById('address').value;
        geocoder.geocode( { 'address': inputAddress}, function(results, status) {
        if (status == 'OK') {
          //マーカーが複数できないようにする
          if (aft == true){
          marker.setMap(null);
          }
          //新しくマーカーを作成する
          map.setCenter(results[0].geometry.location);
          marker = new google.maps.Marker({
            map: map,
            position: results[0].geometry.location,
            draggable: true	// ドラッグ可能にする
          });
          //二度目以降か判断
          aft = true
          //検索した時に緯度経度を入力する
          document.getElementById('lat').value = results[0].geometry.location.lat();
          document.getElementById('lng').value = results[0].geometry.location.lng();
          // マーカーのドロップ（ドラッグ終了）時のイベント
          google.maps.event.addListener( marker, 'dragend', function(ev){
            // イベントの引数evの、プロパティ.latLngが緯度経度
            document.getElementById('lat').value = ev.latLng.lat();
            document.getElementById('lng').value = ev.latLng.lng();
          });
        } else {
        alert('該当する結果がありませんでした：' + status);
        }
        });   
      }  
    </script>

    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBDTLQA9-fkeqZh4o9i-UWDfCAZP6_abs8&callback=initMap" async defer></script>

    <%= f.submit "投稿する" %>

  <% end %>

  <%= link_to "一覧に戻る", coffees_path %>
  <br><br><br>


  <script>
      if (document.URL.match(/new/)){
        document.addEventListener('DOMContentLoaded', () => {
          const createImageHTML = (blob) => {
            const imageElement = document.getElementById('new-image');
            const blobImage = document.createElement('img');
            blobImage.setAttribute('class', 'new-img');
            blobImage.setAttribute('src', blob);

            imageElement.appendChild(blobImage);
          };

          document.getElementById('coffee_image').addEventListener('change', (e) => {
            const imageContent = document.querySelector('.new-img'); // セレクタを修正
            console.log(imageElement);
            if (imageContent) {
              imageContent.remove();
            }}

            const file = e.target.files[0];
            const blob = window.URL.createObjectURL(file);
            createImageHTML(blob);
          });
        });
      }
  </script>
    
  <script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>
  <script>
    $(document).ready(function() {
      $('#image-input').on('change', function(e) {
        var files = e.target.files;
        $('#image-preview').empty(); 
        for (var i = 0; i < files.length; i++) {
          var reader = new FileReader();
          reader.onload = function(e) {
            $('#image-preview').append('<img src="' + e.target.result + '" class="preview-image" />');
          }
          reader.readAsDataURL(files[i]);
        }
      });
    });
  </script>
</div>